<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd">

<!--    开启使用security注解，在指定方法上使用，@Secured("ROLE_ADMIN")不可以省略ROLE_前缀，而jrs250可省略，然后security注解本身是spring-security里面的注解，所以不用在额外导包-->
<!--    <security:global-method-security secured-annotations="enabled"></security:global-method-security>-->


<!--方法级权限控制 开启jsr250注解，导入jsr250依赖，@RolesAllowed("角色名称")写在方法上-->
<!--    <security:global-method-security jsr250-annotations="enabled"></security:global-method-security>-->

<!--方法及权限控制，开启pre-post-annotations="enabled"，可以使用spel表达式
    @PreAuthorize("authentication.principal.username == 'qwe'")//意思为只有操作的用户名为qwe的用户才能操作该方法
    @PreAuthorize("hasRole('ROLE_ADMIN')")//只有管理员角色才能进行操作-->
    <security:global-method-security secured-annotations="enabled" jsr250-annotations="enabled" pre-post-annotations="enabled"></security:global-method-security>

    <!-- 配置不拦截的资源 -->
    <security:http pattern="/login.jsp" security="none"/>
    <security:http pattern="/failer.jsp" security="none"/>
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>
    <!--
    	配置具体的规则
    	auto-config="true"	不用自己编写登录的页面，框架提供默认登录页面
    	use-expressions="false"	是否使用SPEL表达式（没学习过）//这个属性为true的话，则代表页面使用页面端权限控制，所以 <security:http auto-config="true" use-expressions="true">
    	<security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>这句要变成hasAnyRole这样
    	前端页面：这样写代表security:authorize标签括住的页面标签只有具有管理员权限的角色才能看到用户管理这个选项标签，否则看不到
    	<security:authorize access="hasRole('ADMIN')">
						<a href="${pageContext.request.contextPath}/user/findAll.do"> <i
							class="fa fa-circle-o"></i> 用户管理
					     </a>
		</security:authorize>
    -->
<!--    如果 <security:http auto-config="true" use-expressions="false">，并且<security:intercept-url pattern="/**" access="ROLE_USER,ROLE_ADMIN"/>
        又想前端使用页面控制权限，使用espl表达式，上面这两个又不想改为true和hasRole的话，则开启下面这个bean-->
<!--    <bean id="webSecurityExpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>-->
    <security:http auto-config="true" use-expressions="true">
        <security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
        <!-- 配置具体的拦截的规则 pattern="请求路径的规则" access="访问系统的人，必须有ROLE_USER的角色" -->
<!--        <security:intercept-url pattern="/**" access="ROLE_USER,ROLE_ADMIN"/>这个是不使用页面端权限控制的-->

        <!-- 定义跳转的具体的页面 -->
        <security:form-login
                login-page="/login.jsp"
                login-processing-url="/login.do"
                default-target-url="/index.jsp"
                authentication-failure-url="/failer.jsp"
                authentication-success-forward-url="/pages/main.jsp"
        />

        <!-- 关闭跨域请求 -->
        <security:csrf disabled="true"/>
        <!-- 退出 -->
        <security:logout invalidate-session="true" logout-url="/logout.do" logout-success-url="/login.jsp" />

    </security:http>

    <!-- 切换成数据库中的用户名和密码 -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userService">
            <!-- 配置加密的方式-->
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- 配置加密类 -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>



    <!-- 提供了入门的方式，在内存中存入用户名和密码
    <security:authentication-manager>
    	<security:authentication-provider>
    		<security:user-service>
    			<security:user name="admin" password="{noop}admin" authorities="ROLE_USER"/>
    		</security:user-service>
    	</security:authentication-provider>
    </security:authentication-manager>
    -->

</beans>












